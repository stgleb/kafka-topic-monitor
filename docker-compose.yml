version: '3.8'  # Specify the version of Docker Compose file format

services:
  kafka:
    image: docker.io/bitnami/kafka:4.0
    ports:
      - "9092:9092"  # Expose the Kafka service to the host
    volumes:
      - "kafka_data:/bitnami"  # Persist data on the host
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093  # Setting up the controller quorum
      
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093  # Listening on all interfaces
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092,CONTROLLER://localhost:9093  # Exchange localhost if you are using Docker
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT  # Inter-broker communication use PLAINTEXT
    healthcheck:
      test: ["CMD", "bash", "-c", "kafka-topics.sh --bootstrap-server localhost:9092 --list || exit 1"]
      interval: 30s      # Check every 30 seconds
      timeout: 10s       # Timeout for health check
      retries: 3        # Retry 3 times before marking as unhealthy

  monitor:
    depends_on:
      kafka:
        condition: service_healthy  # Wait for Kafka to be healthy before starting the monitor
    command: ["/monitor", "-bootstrap-servers", "kafka:9092", "-inactivity-days", "30", "-addr", ":8080", "-log-level", "info"]
    image: monitor:latest  # Use the built image
    ports:
      - "8080:8080"        # Map port 8080 of the host to port 8080 of the container

volumes:
  kafka_data:
    driver: local  # Use default local driver for persistence